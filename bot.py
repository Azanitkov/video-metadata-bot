import os
import asyncio
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from pymediainfo import MediaInfo

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

bot = Bot(token=TOKEN)
app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

async def analyze_video(file_path):
    media_info = MediaInfo.parse(file_path)
    general = next((t for t in media_info.tracks if t.track_type == "General"), None)
    video = next((t for t in media_info.tracks if t.track_type == "Video"), None)

    report = []
    if general and general.encoded_application:
        report.append(f"‚úèÔ∏è –ö–æ–¥–∏—Ä–æ–≤–∞–ª–æ—Å—å —á–µ—Ä–µ–∑: {general.encoded_application}")
    else:
        report.append("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å.")
    if video:
        report.append(f"üéûÔ∏è –ö–æ–¥–µ–∫: {video.codec_id}, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {video.width}x{video.height}")

    return "\n".join(report or ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ."])

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    video = update.message.video or update.message.document
    if not video:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ.")
        return

    file = await context.bot.get_file(video.file_id)
    file_path = f"./{video.file_id}.mp4"
    await file.download_to_drive(file_path)

    try:
        result = await analyze_video(file_path)
        await update.message.reply_text(result)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ: {e}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
application.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, handle_video))

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    asyncio.run(application.process_update(update))
    return "ok"

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

