import os
import asyncio
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from pymediainfo import MediaInfo

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN env var is not set")

bot = Bot(token=TOKEN)
app = Flask(__name__)
application = Application.builder().token(TOKEN).build()


# üîç –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
async def analyze_video(file_path: str) -> str:
    media_info = MediaInfo.parse(file_path)
    general = next((t for t in media_info.tracks if t.track_type == "General"), None)
    video = next((t for t in media_info.tracks if t.track_type == "Video"), None)
    audio = next((t for t in media_info.tracks if t.track_type == "Audio"), None)

    report = []

    if general:
        report.append(f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}")
        report.append(f"üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {general.file_size} –±–∞–π—Ç")
        report.append(f"üì¶ –§–æ—Ä–º–∞—Ç: {general.format}")
        report.append(f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {general.duration} –º—Å")
        report.append(f"üì° –û–±—â–∏–π –±–∏—Ç—Ä–µ–π—Ç: {general.overall_bit_rate} –±–∏—Ç/—Å")
        report.append(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {general.encoded_date or general.tagged_date}")
        report.append(f"üõ†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {general.encoded_application or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")

    if video:
        report.append(f"üéûÔ∏è –í–∏–¥–µ–æ –∫–æ–¥–µ–∫: {video.codec_id}")
        report.append(f"üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {video.width}x{video.height}")
        report.append(f"üéØ FPS: {video.frame_rate}")
        report.append(f"üî≤ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {video.display_aspect_ratio}")
        report.append(f"üìÖ –î–∞—Ç–∞ —Å—ä—ë–º–∫–∏: {video.recorded_date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")

    if audio:
        report.append(f"üîä –ê—É–¥–∏–æ –∫–æ–¥–µ–∫: {audio.codec_id}")

    return "\n".join(filter(None, report)) or "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ."


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    video = update.message.video or update.message.document
    if not video or (video.mime_type and not video.mime_type.startswith("video/")):
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –≤–∏–¥–µ–æ.")
        return

    file = await context.bot.get_file(video.file_id)
    file_path = f"/tmp/{video.file_id}.mp4"
    await file.download_to_drive(file_path)

    try:
        report = await analyze_video(file_path)
        await update.message.reply_text(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:\n{report}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)


# üö´ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-–≤–∏–¥–µ–æ
async def handle_non_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.")


# üì• –†–æ—É—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
application.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, handle_video))
application.add_handler(MessageHandler(~(filters.VIDEO | filters.Document.VIDEO), handle_non_video))


# üåê Flask + Telegram Webhook
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

async def init_app():
    await application.initialize()
    await application.start()

loop.run_until_complete(init_app())


@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_update = request.get_json(force=True)
    update = Update.de_json(json_update, bot)
    loop.run_until_complete(application.process_update(update))
    return "ok"


@app.route("/")
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
